>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

matrix_divided accept only integers and float which be divided by div and return a new matrix which each element is rounded to 2 decimal places
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix_divided([[1.3, 2.2, 3.5], [4.5, 5.3, 6.4]], 3.4)
	[[0.38, 0.65, 1.03], [1.32, 1.56, 1.88]]

each row of the matrix argument must have the same size or it will end in a error
	>>> matrix_divided([[1, 2, 3, 4], [4, 5, 6]], 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

if any element of the matrix argumein is not a int or float will raise a error
	>>> matrix_divided([[1, 2, 3], [4, 5, "test"]], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

div argument must be a int or float otherwise will raise a error
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "test")
	Traceback (most recent call last):
	TypeError: div must be a number

div argument can't be equal with zero otherwise will raise an argument
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

matrix_divided should return a new list
	>>> type(matrix_divided([[1, 2, 3], [4, 5, 6]], 3))
	<class 'list'>
